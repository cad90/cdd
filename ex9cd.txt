
Exp :9(Stack Allocation)

import java.util.Scanner;

public class StackOperations {
    static int[] stack;
    static int top, n;-*

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        top = -1;
        System.out.print("Enter the size of stack[MAX=100]: ");
        n = scanner.nextInt();
        stack = new int[n];

        System.out.println("\n\tStack Operations:");
        System.out.println("\t-----------------");
        System.out.println("\t1. Push");
        System.out.println("\t2. Pop");
        System.out.println("\t3. Display");
        System.out.println("\t4. EXIT");

        int ch;
        do {
            System.out.print("\nEnter your choice: ");
            ch = scanner.nextInt();
            switch (ch) {
                case 1:
                    push();
                    break;
                case 2:
                    pop();
                    break;
                case 3:
                    display();
                    break;
                case 4:
                    System.out.println("\n\tExiting...");
                    break;
                default:
 
                    System.out.println("Please enter a valid choice.");
            }
        } while (ch != 4);
    }

    static void push() {
        Scanner scanner = new Scanner(System.in);
        if (top >= n - 1) {
            System.out.println("\n\nStack overflow");
        } else {
            System.out.print("Enter a value to be pushed: ");
            int x = scanner.nextInt();
            top++;
            stack[top] = x;
        }
    }

    static void pop() {
        if (top == -1)
            System.out.println("\n\tStack underflow");
        else {
            System.out.println("\n\tThe popped element is " + stack[top]);
            top--;
        }
    }

    static void display() {
        if (top >= 0) {
            System.out.println("\nThe elements in stack:");
            
            for (int i = top; i >= 0; i--)
                System.out.println(stack[i]);
        } else {
            System.out.println("\nThe stack is empty.");
        }
    }
}


