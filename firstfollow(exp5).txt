
import java.util.*;
import java.io.*;

class HelloWorld {
    static char nterm[],term[];
    static int ntlen,tlen;
    static String g[][],fst[],flw[];
    public static void main(String args[]) throws IOException
    {
       String nt,t;
       int i,j,n;
       BufferedReader br =new BufferedReader(new InputStreamReader (System.in));
       System.out.println("Enter the non terminals: ");
       nt=br.readLine();
       ntlen=nt.length();
       nterm=new char[ntlen];
       nterm= nt.toCharArray();
       System.out.println("Enter the terminals ");
       t=br.readLine();
       tlen=t.length();
       term=new char[tlen];
       term =t.toCharArray();
       System.out.println("Specify the grammer(Enter 9 for epsilon production)");
       g=new String[ntlen][];
       for(i=0;i<ntlen;i++)
       {
           System.out.println("Enter the no.of productions for "+nterm[i]);
           n=Integer.parseInt(br.readLine());
           g[i]=new String[n];
           System.out.println("Enter the productions: ");
           for(j=0;j<n;j++)
           {
               g[i][j]=br.readLine();
           }
       }
       fst=new String[ntlen];
       for(i=0;i<ntlen;i++)
       fst[i]=first(i);
       System.out.println("First Set");
       for(i=0;i<ntlen;i++)
       System.out.println(removeDuplicates(fst[i]));
       flw=new String[ntlen];
       for(i=0;i<ntlen;i++)
       flw[i]=follow(i);
       System.out.println("Follow Set");
       for(i=0;i<ntlen;i++)
       System.out.println(removeDuplicates(flw[i]));
    }
    static String first(int i)
    {
        int j,k,l=0,found=0;
        String temp="",str="";
        for(j=0;j<g[i].length;j++)
        {
            for(k=0;k<g[i][j].length();k++,found=0)
            {
                for(l=0;l<ntlen;l++)
                {
                    if(g[i][j].charAt(k)==nterm[l])
                    {
                        str=first(l);
                        if(!(str.length()==1 && str.charAt(0)=='9'))
                        temp=temp+str;
                        found=1;
                        break;
                    }
                }
                if(found==1)
                {
                    if(str.contains("9"))
                    continue;
                }
                else
                temp=temp+g[i][j].charAt(k);
                break;
            }
        }
        return temp;
    }
    static String follow(int i)
    {
        char pro[],chr[];
        String temp="";
        int j,k,l,m,n,found=0;
        if(i==0)
        temp="$";
        for(j=0;j<ntlen;j++)
        {
            for(k=0;k<g[j].length;k++)
            {
                pro=new char[g[j][k].length()];
                pro=g[j][k].toCharArray();
                for(l=0;l<pro.length;l++)
                {
                    if(pro[l]==nterm[i])
                    {
                        if(l==pro.length-1)
                        {
                            if(j<i)
                            temp=temp+flw[j];
                        }
                        else
                        {
                            for(m=0;m<ntlen;m++)
                            {
                                if(pro[l+l]==nterm[m])
                                {
                                    chr=new char[fst[m].length()];
                                    chr=fst[m].toCharArray();
                                    for(n=0;n<chr.length;n++)
                                    {
                                        if(chr[n]=='9')
                                        {
                                            if(l+l==pro.length-1)
                                            temp=temp+follow(j);
                                            else
                                            temp=temp+follow(m);
                                        }
                                        else
                                        temp=temp+chr[n];
                                    }
                                    found=1;
                                }
                            }
                            if(found!=1)
                            temp=temp+pro[l+l];
                        }
                    }
                }
            }
        }
        return temp;
    }
    static String removeDuplicates(String str)
    {
        int i;
        boolean seen[]=new boolean[256];
        StringBuilder sb=new StringBuilder(seen.length);
        for(i=0;i<str.length();i++)
        {
            char ch=str.charAt(i);
            if(seen[ch]==false)
            {
                seen[ch]=true;
                sb.append(ch);
            }
        }
        return sb.toString();
    }
   
}


